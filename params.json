{"name":"Code Jugalbandi","tagline":"","body":"\r\n## Genesis ##\r\nAfter proposing the idea of CodeJugalbandi - [http://www.jroller.com/DhavalDalal/entry/code_jugalbandi](http://www.jroller.com/DhavalDalal/entry/code_jugalbandi), \r\nit was time for me to test the idea out.  Having discussed it in our Functional Programming discussion group \r\n([Aslam Khan](http://f3yourmind.net/), [Ryan Lemmer](https://github.com/uroboros) and [Jaydeep Kulkarni](https://www.linkedin.com/in/jaydeepk)), \r\nthey all thought it was a novel idea and we should give it a try.  \r\n\r\n[@ryanLemmer](https://twitter.com/ryanlemmer/) and [@dhavaldalal](https://twitter.com/softwareartisan/) went ahead with CodeJugalbandi's materialization.  Ryan brought in the idea of Melodies to \r\ndo multiple code jugalbandi rounds.  Like in real musical Jugalbandi there are the two roles - the creator (and player) and the listener (and player), Ryan suggested that we give creative names to the jugalbandists who participate.  \r\nSo to put things in perspective, the creator of the melody is called Bramha and the other(s) who listen to the melody and play accordingly is/are called Krishna.\r\n\r\nThank-you [Functional Conference - @FuConf](http://functionalconf.com/) for providing the platform to debut this.\r\n\r\n## Code Jugalbandi Notes, Sketches, etc ##\r\n### Structure of the session ###\r\n* Introduce the opp person (this assumes you have 2 people, but if you have more scale it accordingly).\r\n* Intro to Jugalbandi (musical - [play video](http://www.youtube.com/embed/_WLwoQSIKv4?feature=player_detailpage) for 2 mins) and let it speak for itself.  The audience is smart enough to relate Musical Jugalbandi to Code Jugalbandi [[embed url=http://www.youtube.com/watch?v=_WLwoQSIKv4]]\r\n* Each Jugalbandi round is a melody.  Aim for about max 15 mins per melody.\r\n\r\nI know the resolution of the video is not that great, but I found (based on search results I got) it to be the most apt video to convey idea in less\r\nthan 2 minutes to a large audience.  \r\n\r\n### During a melody ###\r\n* Say you are the Bramha of a melody, and when playing (showing - demo) your melody, you can do loud thinking and/or soliloquies as you code along.\r\n* Once Bramha is done creating, Krishna replays the same melody differently and again thinks aloud while demoing it.\r\n* After both Bramha and Krishna are done, they converse reflecting upon the approach, pro and cons of each.  This natural conversational style, like the fire-side chats will be very reinforcing and involve the audience.\r\n* At the end of a jugalbandi round - both bow down to the audience to indicate completion of the current round.\r\n\r\nRepeat the above for multiple melodies.\r\n\r\n### Types ###\r\nThere are many jugalbandis that can be materialized, for example, our current focus is on:\r\n\r\n* Exploring Programming Paradigms\r\n    * Functional Programming\r\n* Design Patterns\r\n\r\nDo not just limit yourself to the above, however.  For example, if you want to compare two frameworks, say like in the Javascript land, there are tons of `MV*` frameworks - AngularJS, KnockoutJS, EmberJS, Backbone etc... You could use it to enable learning of frameworks (or anything else) by comparison and contrast - a natural way for human mind to grasp new things.  Participants can see can see how each one solves the same thing differently.\r\n\r\nSo just be creative in applying this Code Jugalbandi style to suit your context.  Use Code Jugalbandi as a source of inspiration or a gentle nudge for people to try out a new stuff :-)\r\n\r\n## Contributing ##\r\nIf you feel you have liked the idea and want to contribute, we encourage pull requests.  Alternatively, if you have your own repo somewhere, please send us the link and we will link to your repo from this main page.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}